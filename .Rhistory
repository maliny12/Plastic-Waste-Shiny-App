return(map)
}
# Call the heatmap function with appropriate arguments
heatmap_result <- heatmap(waste_gdp_10, "Daily_Plastic_Waste", "Africa")
library(dplyr)
library(leaflet)
library(broom)
waste_vs_gdp <- readr::read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-05-21/per-capita-plastic-waste-vs-gdp-per-capita.csv")
waste_gdp_10 <- waste_vs_gdp %>%
filter(Year == 2010) %>% # Filter for observations in 2010
select(Entity,`Per capita plastic waste (kilograms per person per day)`) %>%
rename("Daily_Plastic_Waste" = `Per capita plastic waste (kilograms per person per day)`)
heatmap <- function(df, column_name, region) {
# Select only the data that the user has selected to view
plot_df <- df %>%
select(Entity, {{column_name}}) %>%
rename(value = {{column_name}}, region = Entity)
# Create a list of region-specific coordinates and boundaries
region_coords <- list(
Africa = list(xlim = c(-20, 60), ylim = c(-40, 40)),
North_America = list(xlim = c(-180, -50), ylim = c(0, 80)),
Europe = list(xlim = c(-27, 36), ylim = c(34, 67)),
Oceania = list(xlim = c(100, 180), ylim = c(-50, 0)),
Asia = list(xlim = c(20, 180), ylim = c(-10, 70)),
South_America = list(xlim = c(-90, -30), ylim = c(-60, 20))
)
# Get the region-specific coordinates and boundaries
region_info <- region_coords[[region]]
# Create a Leaflet map
map <- leaflet() %>%
setView(lng = mean(region_info$xlim), lat = mean(region_info$ylim), zoom = 3) %>%
addProviderTiles(providers$OpenStreetMap.BlackAndWhite)  # You can change the tile provider
# Load the world map data and plot polygons
world_map <- maps::map("world", plot = FALSE) %>%
maptools::pruneMap(xlim = region_info$xlim, ylim = region_info$ylim) %>%
tidy()
# Filter data for the selected region
sub_map_data <- left_join(world_map, plot_df, by = c("region" = "Entity"))
# Plot the polygons with color based on the values
map <- map %>%
addPolygons(
data = sub_map_data,
fillColor = ~colorNumeric("YlOrRd", domain = c(0, max(sub_map_data$value)))(value),
fillOpacity = 0.7,
weight = 1,
label = ~paste(region, "<br>", value, "tons"),
highlightOptions(
weight = 2,
color = "white",
fillOpacity = 0.7,
bringToFront = TRUE
),
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"
)
)
# Custom titles for data type
legendTitle <- ""
if (column_name == 'Daily_Plastic_Waste') {
plotTitle <- "Per capita plastic waste (kilograms per person per day)."
legendTitle <- "kgs"
} else if (column_name == 'Daily_Mismanaged_Waste') {
plotTitle <- "Per capita mismanaged plastic waste (kilograms per person per day)."
legendTitle <- "kgs"
} else if (column_name == 'Mismanaged_Waste') {
plotTitle <- "Mismanaged waste in ton, by country."
legendTitle <- "tons"
}
# Add legend and title
map <- map %>%
addLegend(
pal = colorNumeric("YlOrRd", domain = sub_map_data$value),
values = sub_map_data$value,
title = legendTitle,
position = "bottomright"
) %>%
addTitle(plotTitle, position = "topcenter")
return(map)
}
# Call the heatmap function with appropriate arguments
heatmap_result <- heatmap(waste_gdp_10, "Daily_Plastic_Waste", "Africa")
library(dplyr)
library(leaflet)
library(broom)
waste_vs_gdp <- readr::read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-05-21/per-capita-plastic-waste-vs-gdp-per-capita.csv")
waste_gdp_10 <- waste_vs_gdp %>%
filter(Year == 2010) %>% # Filter for observations in 2010
select(Entity,`Per capita plastic waste (kilograms per person per day)`) %>%
rename("Daily_Plastic_Waste" = `Per capita plastic waste (kilograms per person per day)`)
heatmap <- function(df, column_name, region) {
# Select only the data that the user has selected to view
plot_df <- df %>%
select(Entity, {{column_name}}) %>%
rename(value = {{column_name}}, region = Entity)
# Create a list of region-specific coordinates and boundaries
region_coords <- list(
Africa = list(xlim = c(-20, 60), ylim = c(-40, 40)),
North_America = list(xlim = c(-180, -50), ylim = c(0, 80)),
Europe = list(xlim = c(-27, 36), ylim = c(34, 67)),
Oceania = list(xlim = c(100, 180), ylim = c(-50, 0)),
Asia = list(xlim = c(20, 180), ylim = c(-10, 70)),
South_America = list(xlim = c(-90, -30), ylim = c(-60, 20))
)
# Get the region-specific coordinates and boundaries
region_info <- region_coords[[region]]
# Create a Leaflet map
map <- leaflet() %>%
setView(lng = mean(region_info$xlim), lat = mean(region_info$ylim), zoom = 3) %>%
addProviderTiles(providers$OpenStreetMap.BlackAndWhite)  # You can change the tile provider
# Load the world map data and plot polygons
world_map <- maps::map("world", plot = FALSE) %>%
maptools::pruneMap(xlim = region_info$xlim, ylim = region_info$ylim)
# Filter data for the selected region
sub_map_data <- left_join(world_map, plot_df, by = c("region" = "Entity"))
# Plot the polygons with color based on the values
map <- map %>%
addPolygons(
data = sub_map_data,
fillColor = ~colorNumeric("YlOrRd", domain = c(0, max(sub_map_data$value)))(value),
fillOpacity = 0.7,
weight = 1,
label = ~paste(region, "<br>", value, "tons"),
highlightOptions(
weight = 2,
color = "white",
fillOpacity = 0.7,
bringToFront = TRUE
),
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"
)
)
# Custom titles for data type
legendTitle <- ""
if (column_name == 'Daily_Plastic_Waste') {
plotTitle <- "Per capita plastic waste (kilograms per person per day)."
legendTitle <- "kgs"
} else if (column_name == 'Daily_Mismanaged_Waste') {
plotTitle <- "Per capita mismanaged plastic waste (kilograms per person per day)."
legendTitle <- "kgs"
} else if (column_name == 'Mismanaged_Waste') {
plotTitle <- "Mismanaged waste in ton, by country."
legendTitle <- "tons"
}
# Add legend and title
map <- map %>%
addLegend(
pal = colorNumeric("YlOrRd", domain = sub_map_data$value),
values = sub_map_data$value,
title = legendTitle,
position = "bottomright"
) %>%
addTitle(plotTitle, position = "topcenter")
return(map)
}
# Call the heatmap function with appropriate arguments
heatmap_result <- heatmap(waste_gdp_10, "Daily_Plastic_Waste", "Africa")
world_map <- maps::map("world", plot = FALSE) %>%
maptools::pruneMap(xlim = region_info$xlim, ylim = region_info$ylim)
world_map <- maps::map("world", plot = FALSE)
View(world_map)
world_map <- maps::map("world", plot = FALSE) %>%
maptools::pruneMap()
View(world_map)
library(dplyr)
library(leaflet)
library(broom)
waste_vs_gdp <- readr::read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-05-21/per-capita-plastic-waste-vs-gdp-per-capita.csv")
waste_gdp_10 <- waste_vs_gdp %>%
filter(Year == 2010) %>% # Filter for observations in 2010
select(Entity,`Per capita plastic waste (kilograms per person per day)`) %>%
rename("Daily_Plastic_Waste" = `Per capita plastic waste (kilograms per person per day)`)
heatmap <- function(df, column_name, region) {
# Select only the data that the user has selected to view
plot_df <- df %>%
select(Entity, {{column_name}}) %>%
rename(value = {{column_name}}, region = Entity)
# Create a list of region-specific coordinates and boundaries
region_coords <- list(
Africa = list(xlim = c(-20, 60), ylim = c(-40, 40)),
North_America = list(xlim = c(-180, -50), ylim = c(0, 80)),
Europe = list(xlim = c(-27, 36), ylim = c(34, 67)),
Oceania = list(xlim = c(100, 180), ylim = c(-50, 0)),
Asia = list(xlim = c(20, 180), ylim = c(-10, 70)),
South_America = list(xlim = c(-90, -30), ylim = c(-60, 20))
)
# Get the region-specific coordinates and boundaries
region_info <- region_coords[[region]]
# Create a Leaflet map
map <- leaflet() %>%
setView(lng = mean(region_info$xlim), lat = mean(region_info$ylim), zoom = 3) %>%
addProviderTiles(providers$OpenStreetMap.BlackAndWhite)  # You can change the tile provider
# Load the world map data and plot polygons
world_map <- maps::map("world", plot = FALSE) %>%
maptools::pruneMap(xlim = region_info$xlim, ylim = region_info$ylim)
# Filter data for the selected region
sub_map_data <- left_join(world_map, plot_df, by = c("name" = "Entity"))
# Plot the polygons with color based on the values
map <- map %>%
addPolygons(
data = sub_map_data,
fillColor = ~colorNumeric("YlOrRd", domain = c(0, max(sub_map_data$value)))(value),
fillOpacity = 0.7,
weight = 1,
label = ~paste(region, "<br>", value, "tons"),
highlightOptions(
weight = 2,
color = "white",
fillOpacity = 0.7,
bringToFront = TRUE
),
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"
)
)
# Custom titles for data type
legendTitle <- ""
if (column_name == 'Daily_Plastic_Waste') {
plotTitle <- "Per capita plastic waste (kilograms per person per day)."
legendTitle <- "kgs"
} else if (column_name == 'Daily_Mismanaged_Waste') {
plotTitle <- "Per capita mismanaged plastic waste (kilograms per person per day)."
legendTitle <- "kgs"
} else if (column_name == 'Mismanaged_Waste') {
plotTitle <- "Mismanaged waste in ton, by country."
legendTitle <- "tons"
}
# Add legend and title
map <- map %>%
addLegend(
pal = colorNumeric("YlOrRd", domain = sub_map_data$value),
values = sub_map_data$value,
title = legendTitle,
position = "bottomright"
) %>%
addTitle(plotTitle, position = "topcenter")
return(map)
}
# Call the heatmap function with appropriate arguments
heatmap_result <- heatmap(waste_gdp_10, "Daily_Plastic_Waste", "Africa")
shiny::runApp('Shiny_app')
runApp('Shiny_app')
runApp('app copy.R')
library(shiny); runApp('Shiny_app/app copy.R')
library(shiny); runApp('app copy.R')
library(leaflet)
library(tidyverse)
m <- leaflet() %>%
addTiles()  # Adds the default tile layer (OpenStreetMap)
m
m <- m %>%
setView(lng = -73.985, lat = 40.748, zoom = 12) %>%
addTiles() %>%
addMarkers(lng = -73.985, lat = 40.748) %>%
addScaleBar(position = "bottomright")  # Add a scale bar
m
m <- m %>%
setView(lng = -73.985, lat = 40.748, zoom = 12) %>%
addTiles() %>%
addMarkers(lng = -73.985, lat = 40.748) %>%
addScaleBar(position = "bottomright")  # Add a scale bar
m <- m %>%
setView(lng = -73.985, lat = 40.748, zoom = 12)
m
m <- m %>%
setView(lng = -73.985, lat = 40.748, zoom = 12)
m
m <- leaflet() %>%
addTiles()  # Adds the default tile layer (OpenStreetMap)
View(m)
library(ggplot2)
ggplot(mtcars, aes(x = mpg, y = cyl)) +
geom_point()
library(ggplot2)
ggplot(mtcars, aes(x = mpg, y = cyl))+
boxplot()
library(ggplot2)
ggplot(mtcars, aes(x = mpg, y = cyl))+
geom_point()
library(shiny); runApp('app copy.R')
library(shiny); runApp('app copy.R')
library(shiny); runApp('app copy.R')
library(shiny); runApp('app copy.R')
library(shiny); runApp('app copy.R')
library(shiny); runApp('app copy.R')
library(shiny); runApp('Shiny_App.R')
library(shiny); runApp('Shiny_App/Shiny_App.R')
library(ggplot2)# For plots
library(tidyverse)
library(ggpattern)
library(plotly) # For interactive plot
library(sp) # For maptools package
library(maptools) # For regional map
library(broom) # For tidying the data
library(shiny) # For R-Shiny
library(mapproj) # For Coord_map() function
mismanaged_vs_gdp <- readr::read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-05-21/per-capita-mismanaged-plastic-waste-vs-gdp-per-capita.csv")
mismanaged_gdp_10 <- mismanaged_vs_gdp %>%
filter(Year == 2010) %>%
select(Entity, `Per capita mismanaged plastic waste (kilograms per person per day)`) %>%
rename("Daily_Mismanaged_Waste"= `Per capita mismanaged plastic waste (kilograms per person per day)`)
heatmap <- function(df, column_name, region) {
# Select only the data that the user has selected to view
plot_df <- df %>%
select(Entity, {{column_name}}) %>%
rename(value = {{column_name}}, region = Entity)
##### Create regional map  #####
if (region == "Africa") { # Create map for Africa
africa <-  maps::map("world", fill=TRUE, plot=FALSE) %>%
maptools::pruneMap(xlim = c(-20,60), ylim = c(-40, 40)) %>%
tidy()
sub_map <- left_join(africa , plot_df, "region") # Join Africa map with plot_df
} else if (region == "North_America") { # Create map for North America
north_america <-  maps::map("world", fill=TRUE, plot=FALSE) %>%
maptools::pruneMap(xlim = c(-180, -50), ylim = c(0, 80)) %>%
tidy()
sub_map <- left_join(north_america , plot_df, "region") # Join North America map with plot_df
} else if (region == "Europe") { # Create map for Europe
europe <-  maps::map("world", fill=TRUE, plot=FALSE) %>%
maptools::pruneMap(xlim = c(-27,36), ylim = c(34,67)) %>%
tidy()
sub_map <- left_join(europe , plot_df , "region") # Join Europe map with plot_df
} else if (region == "Oceania") { # Create map for Oceania
oceania <-  maps::map("world", fill=TRUE, plot=FALSE) %>%
maptools::pruneMap(xlim = c(100, 180), ylim = c(-50, 0)) %>%
tidy()
sub_map <- left_join(oceania , plot_df , "region") # Join Oceania map with plot_df
} else if (region == "Asia") { # Join Europe map with plot_df
asia <-  maps::map("world", fill=TRUE, plot=FALSE) %>%
maptools::pruneMap(xlim = c(20,180), ylim = c(-10, 70)) %>%
tidy()
sub_map <- left_join(asia , plot_df , "region") # Join Asia map with plot_df
} else if(region == "South_America") { # Create map for South_America
South_America <-  maps::map("world", fill=TRUE, plot=FALSE) %>%
maptools::pruneMap(xlim = c(-90,-30), ylim = c(-60, 20)) %>%
tidy()
sub_map <- left_join(South_America , plot_df , "region")# Join South America map with plot_df
} else { # Create map for the world
world <-  maps::map("world", fill=TRUE, plot=FALSE) %>%
maptools::pruneMap(xlim = c(-180,180), ylim = c(-60, 90)) %>%
tidy()
sub_map <- left_join(world , plot_df , "region")  } # Join World map with plot_df
##### Custom titles for data type  #####
legendTitle = ""
if(column_name == 'Daily_Plastic_Waste'){
plotTitle = "Per capita plastic waste (kilograms per person per day)."
legendTitle = "kgs"
}else if(column_name == 'Daily_Mismanaged_Waste'){
plotTitle = "Per capita mismanaged plastic waste (kilograms per person per day)."
legendTitle = "kgs"
}else if(column_name == 'Mismanaged_Waste'){
plotTitle = "Mismanaged waste in ton, by country."
legendTitle = "tons"
}
# Create a heatmap using Plotly
heatmap <- ggplot(sub_map, tooltip = "text") +
geom_polygon(color = "white",aes(x = long, y = lat,
fill = value, group = group,
text = paste(region, "<br>", value, "tons"))) +
scale_fill_continuous(low="thistle2", high="darkred", trans = "sqrt",
guide="colorbar", na.value = "#9f9f99") +
theme(panel.background = element_rect(fill="white"),
axis.line=element_blank(),axis.text.x=element_blank(),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
panel.border=element_blank(),panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
legend.title = element_text(size=10)) +
labs(fill=legendTitle, title= plotTitle) +
coord_map()
heatmap_plotly <- ggplotly(heatmap, tooltip = "text")
return(heatmap_plotly)
}
heatmap(mismanaged_gdp_10, "Daily_Mismanaged_Waste", "World")
runApp('Shiny_App/Shiny_App.R')
runApp('Shiny_App/Shiny_App.R')
install.packages("threejs")
??threejs
library("shiny")
runApp(system.file("examples/globe",package="threejs"))
runApp(system.file("examples/scatterplot",package="threejs"))
################ Load Data ################
mismanaged_vs_gdp <- readr::read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-05-21/per-capita-mismanaged-plastic-waste-vs-gdp-per-capita.csv")
mismanaged_gdp_10 <- mismanaged_vs_gdp %>%
filter(Year == 2010) %>%
select(Entity, `Per capita mismanaged plastic waste (kilograms per person per day)`) %>%
rename("Daily_Mismanaged_Waste"= `Per capita mismanaged plastic waste (kilograms per person per day)`)
library(threejs)
library(tidyverse)
mismanaged_vs_gdp <- readr::read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-05-21/per-capita-mismanaged-plastic-waste-vs-gdp-per-capita.csv")
mismanaged_gdp_10 <- mismanaged_vs_gdp %>%
filter(Year == 2010) %>%
select(Entity, `Per capita mismanaged plastic waste (kilograms per person per day)`) %>%
rename("Daily_Mismanaged_Waste"= `Per capita mismanaged plastic waste (kilograms per person per day)`)
??maps
library(maps)
data(world.cities, package="maps")
force(world.cities)
map <- maps::map("world", fill=TRUE, plot=FALSE)
mismanaged_gdp_10
mismanaged_gdp_10 <- mismanaged_vs_gdp %>%
filter(Year == 2010) %>%
select(Entity, `Per capita mismanaged plastic waste (kilograms per person per day)`) %>%
rename("Daily_Mismanaged_Waste"= `Per capita mismanaged plastic waste (kilograms per person per day)`,
"region" = Entity)
test_map <- left_join(map, mismanaged_gdp_10, "region")
map <- maps::map("world", fill=TRUE, plot=FALSE) %>%
maptools::pruneMap(xlim = c(20,180), ylim = c(-10, 70)) %>%
tidy()
library(broom)
map <- maps::map("world", fill=TRUE, plot=FALSE) %>%
maptools::pruneMap(xlim = c(20,180), ylim = c(-10, 70)) %>%
tidy()
test_map <- left_join(map, mismanaged_gdp_10, "region")
test_map
View(mismanaged_vs_gdp)
View(mismanaged_gdp_10)
View(map)
mismanaged_gdp_10 <- mismanaged_vs_gdp %>%
filter(Year == 2010) %>%
select(Entity, `Per capita mismanaged plastic waste (kilograms per person per day)`) %>%
rename("value"= `Per capita mismanaged plastic waste (kilograms per person per day)`,
"region" = Entity)
map <- maps::map("world", fill=TRUE, plot=FALSE) %>%
maptools::pruneMap(xlim = c(20,180), ylim = c(-10, 70)) %>%
tidy()
test_map <- left_join(map, mismanaged_gdp_10, "region")
col <- colorRampPalette(c("cyan", "lightgreen"))(10)[floor(10 * value/100) + 1]
mismanaged_vs_gdp
View(mismanaged_gdp_10)
View(mismanaged_vs_gdp)
mismanaged_vs_gdp$`GDP per capita, PPP (constant 2011 international $) (Rate)`
mismanaged_gdp <- mismanaged_vs_gdp %>%
filter(Year == 2010) %>%
select(Entity, `Per capita mismanaged plastic waste (kilograms per person per day)`,
`GDP per capita, PPP (constant 2011 international $) (Rate)`) %>%
rename("value"= `Per capita mismanaged plastic waste (kilograms per person per day)`,
"region" = Entity,
"gpd" = `GDP per capita, PPP (constant 2011 international $) (Rate)`)
mismanaged_gdp <- mismanaged_vs_gdp %>%
filter(Year == 2010) %>%
select(Entity, `Per capita mismanaged plastic waste (kilograms per person per day)`,
`GDP per capita, PPP (constant 2011 international $) (Rate)`) %>%
rename("value"= `Per capita mismanaged plastic waste (kilograms per person per day)`,
"region" = Entity,
"gpd" = `GDP per capita, PPP (constant 2011 international $) (Rate)`)
map <- maps::map("world", fill=TRUE, plot=FALSE) %>%
maptools::pruneMap(xlim = c(20,180), ylim = c(-10, 70)) %>%
tidy()
value  <- 100 * mismanaged_gdp$value / max(mismanaged_gdp$value)
col <- colorRampPalette(c("cyan", "lightgreen"))(10)[floor(10 * value/100) + 1]
test_map <- left_join(map, mismanaged_gdp_10, "region")
globejs(lat=test_map$lat, long=test_map$long, value=value, color=col, atmosphere=TRUE)
value
value
globejs(lat=test_map$lat, long=test_map$long, value=mismanaged_gdp$value,atmosphere=TRUE)
globejs(lat=test_map$lat, long=test_map$long, value=mismanaged_gdp$value, color = mismanaged_gdp$value, atmosphere=TRUE)
globejs(value=mismanaged_gdp$value, color = mismanaged_gdp$value, atmosphere=TRUE)
plot_ly(data = test_map,
type = 'scattergeo',
locationmode = 'ISO-3',
locations = ~region,
z = ~value,
text = ~paste("Region: ", region, "<br>Value: ", value),
color = ~value,
colors = 'Viridis',
colorbar = list(title = "Value"),
marker = list(size = 5)) %>%
layout(geo = list(showland = TRUE))
################ Load Data ################
mismanaged_vs_gdp <- readr::read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-05-21/per-capita-mismanaged-plastic-waste-vs-gdp-per-capita.csv")
mismanaged_gdp <- mismanaged_vs_gdp %>%
filter(Year == 2010) %>%
select(Entity, `Per capita mismanaged plastic waste (kilograms per person per day)`,
`GDP per capita, PPP (constant 2011 international $) (Rate)`) %>%
rename("value"= `Per capita mismanaged plastic waste (kilograms per person per day)`,
"region" = Entity,
"gpd" = `GDP per capita, PPP (constant 2011 international $) (Rate)`)
map <- maps::map("world", fill=TRUE, plot=FALSE) %>%
maptools::pruneMap(xlim = c(20,180), ylim = c(-10, 70)) %>%
tidy()
test_map <- left_join(map, mismanaged_gdp_10, "region")
globejs(value=mismanaged_gdp$value, color = mismanaged_gdp$value, atmosphere=TRUE)
# Create a 3D globe using threejs
globe <- threejs::globejs(data = test_map, colorVar = "value", texture = NA, atmosphere = TRUE)
globe
WorldCountry <-geojsonio::geojson_read("geo_data/countries.geo.json", what = "sp")
View(WorldCountry)
Map <- leaflet(WorldCountry) %>% addTiles() %>% addPolygons()
library(ggplot2)# For plots
library(tidyverse)
library(ggpattern)
library(plotly) # For interactive plot
library(sp) # For maptools package
library(maptools) # For regional map
library(broom) # For tidying the data
library(shiny) # For R-Shiny
library(mapproj) # For Coord_map() function
library(leaflet)
library(geojsonio)
Map <- leaflet(WorldCountry) %>% addTiles() %>% addPolygons()
Map
leaflet(WorldCountry) %>% addTiles() %>% addPolygons() %>%
maptools::pruneMap(xlim = c(-20,60), ylim = c(-40, 40)) %>%
tidy()
