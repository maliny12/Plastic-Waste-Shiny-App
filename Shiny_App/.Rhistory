)
# Get the region-specific coordinates and boundaries
region_info <- region_coords[[region]]
# Create a Leaflet map
map <- leaflet() %>%
setView(lng = mean(region_info$xlim), lat = mean(region_info$ylim), zoom = 3) %>%
addProviderTiles(providers$OpenStreetMap.BlackAndWhite)  # You can change the tile provider
# Load the world map data and plot polygons
world_map <- maps::map("world", plot = FALSE) %>%
maptools::pruneMap(xlim = region_info$xlim, ylim = region_info$ylim) %>%
tidy()
# Filter data for the selected region
sub_map_data <- left_join(world_map, plot_df, by = "region")
# Plot the polygons with color based on the values
map <- map %>%
addPolygons(
data = sub_map_data,
fillColor = ~colorNumeric("YlOrRd", domain = c(0, max(sub_map_data$value)))(value),
fillOpacity = 0.7,
weight = 1,
label = ~paste(region, "<br>", value, "tons"),
highlightOptions(
weight = 2,
color = "white",
fillOpacity = 0.7,
bringToFront = TRUE
),
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"
)
)
# Custom titles for data type
legendTitle <- ""
if (column_name == 'Daily_Plastic_Waste') {
plotTitle <- "Per capita plastic waste (kilograms per person per day)."
legendTitle <- "kgs"
} else if (column_name == 'Daily_Mismanaged_Waste') {
plotTitle <- "Per capita mismanaged plastic waste (kilograms per person per day)."
legendTitle <- "kgs"
} else if (column_name == 'Mismanaged_Waste') {
plotTitle <- "Mismanaged waste in ton, by country."
legendTitle <- "tons"
}
# Add legend and title
map <- map %>%
addLegend(
pal = colorNumeric("YlOrRd", domain = sub_map_data$value),
values = sub_map_data$value,
title = legendTitle,
position = "bottomright"
) %>%
addTitle(plotTitle, position = "topcenter")
return(map)
}
# Call the heatmap function with appropriate arguments
heatmap_result <- heatmap(your_data_frame, "Daily_Plastic_Waste", "Africa")
library(dplyr)
library(leaflet)
waste_vs_gdp <- readr::read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-05-21/per-capita-plastic-waste-vs-gdp-per-capita.csv")
waste_gdp_10 <- waste_vs_gdp %>%
filter(Year == 2010) %>% # Filter for observations in 2010
select(Entity,`Per capita plastic waste (kilograms per person per day)`) %>%
rename("Daily_Plastic_Waste" = `Per capita plastic waste (kilograms per person per day)`)
library(dplyr)
library(leaflet)
library(dplyr)
library(leaflet)
heatmap <- function(df, column_name, region) {
# Select only the data that the user has selected to view
plot_df <- df %>%
select(Entity, {{column_name}}) %>%
rename(value = {{column_name}}, region = Entity)
# Create a list of region-specific coordinates and boundaries
region_coords <- list(
Africa = list(xlim = c(-20, 60), ylim = c(-40, 40)),
North_America = list(xlim = c(-180, -50), ylim = c(0, 80)),
Europe = list(xlim = c(-27, 36), ylim = c(34, 67)),
Oceania = list(xlim = c(100, 180), ylim = c(-50, 0)),
Asia = list(xlim = c(20, 180), ylim = c(-10, 70)),
South_America = list(xlim = c(-90, -30), ylim = c(-60, 20))
)
# Get the region-specific coordinates and boundaries
region_info <- region_coords[[region]]
# Create a Leaflet map
map <- leaflet() %>%
setView(lng = mean(region_info$xlim), lat = mean(region_info$ylim), zoom = 3) %>%
addProviderTiles(providers$OpenStreetMap.BlackAndWhite)  # You can change the tile provider
# Load the world map data and plot polygons
world_map <- maps::map("world", plot = FALSE) %>%
maptools::pruneMap(xlim = region_info$xlim, ylim = region_info$ylim) %>%
tidy()
# Filter data for the selected region
sub_map_data <- left_join(world_map, plot_df, by = "region")
# Plot the polygons with color based on the values
map <- map %>%
addPolygons(
data = sub_map_data,
fillColor = ~colorNumeric("YlOrRd", domain = c(0, max(sub_map_data$value)))(value),
fillOpacity = 0.7,
weight = 1,
label = ~paste(region, "<br>", value, "tons"),
highlightOptions(
weight = 2,
color = "white",
fillOpacity = 0.7,
bringToFront = TRUE
),
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"
)
)
# Custom titles for data type
legendTitle <- ""
if (column_name == 'Daily_Plastic_Waste') {
plotTitle <- "Per capita plastic waste (kilograms per person per day)."
legendTitle <- "kgs"
} else if (column_name == 'Daily_Mismanaged_Waste') {
plotTitle <- "Per capita mismanaged plastic waste (kilograms per person per day)."
legendTitle <- "kgs"
} else if (column_name == 'Mismanaged_Waste') {
plotTitle <- "Mismanaged waste in ton, by country."
legendTitle <- "tons"
}
# Add legend and title
map <- map %>%
addLegend(
pal = colorNumeric("YlOrRd", domain = sub_map_data$value),
values = sub_map_data$value,
title = legendTitle,
position = "bottomright"
) %>%
addTitle(plotTitle, position = "topcenter")
return(map)
}
# Call the heatmap function with appropriate arguments
heatmap_result <- heatmap(waste_gdp_10, "Daily_Plastic_Waste", "Africa")
library(dplyr)
library(leaflet)
library(broom)
waste_vs_gdp <- readr::read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-05-21/per-capita-plastic-waste-vs-gdp-per-capita.csv")
waste_gdp_10 <- waste_vs_gdp %>%
filter(Year == 2010) %>% # Filter for observations in 2010
select(Entity,`Per capita plastic waste (kilograms per person per day)`) %>%
rename("Daily_Plastic_Waste" = `Per capita plastic waste (kilograms per person per day)`)
library(dplyr)
library(leaflet)
library(dplyr)
library(leaflet)
heatmap <- function(df, column_name, region) {
# Select only the data that the user has selected to view
plot_df <- df %>%
select(Entity, {{column_name}}) %>%
rename(value = {{column_name}}, region = Entity)
# Create a list of region-specific coordinates and boundaries
region_coords <- list(
Africa = list(xlim = c(-20, 60), ylim = c(-40, 40)),
North_America = list(xlim = c(-180, -50), ylim = c(0, 80)),
Europe = list(xlim = c(-27, 36), ylim = c(34, 67)),
Oceania = list(xlim = c(100, 180), ylim = c(-50, 0)),
Asia = list(xlim = c(20, 180), ylim = c(-10, 70)),
South_America = list(xlim = c(-90, -30), ylim = c(-60, 20))
)
# Get the region-specific coordinates and boundaries
region_info <- region_coords[[region]]
# Create a Leaflet map
map <- leaflet() %>%
setView(lng = mean(region_info$xlim), lat = mean(region_info$ylim), zoom = 3) %>%
addProviderTiles(providers$OpenStreetMap.BlackAndWhite)  # You can change the tile provider
# Load the world map data and plot polygons
world_map <- maps::map("world", plot = FALSE) %>%
maptools::pruneMap(xlim = region_info$xlim, ylim = region_info$ylim) %>%
tidy()
# Filter data for the selected region
sub_map_data <- left_join(world_map, plot_df, by = "region")
# Plot the polygons with color based on the values
map <- map %>%
addPolygons(
data = sub_map_data,
fillColor = ~colorNumeric("YlOrRd", domain = c(0, max(sub_map_data$value)))(value),
fillOpacity = 0.7,
weight = 1,
label = ~paste(region, "<br>", value, "tons"),
highlightOptions(
weight = 2,
color = "white",
fillOpacity = 0.7,
bringToFront = TRUE
),
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"
)
)
# Custom titles for data type
legendTitle <- ""
if (column_name == 'Daily_Plastic_Waste') {
plotTitle <- "Per capita plastic waste (kilograms per person per day)."
legendTitle <- "kgs"
} else if (column_name == 'Daily_Mismanaged_Waste') {
plotTitle <- "Per capita mismanaged plastic waste (kilograms per person per day)."
legendTitle <- "kgs"
} else if (column_name == 'Mismanaged_Waste') {
plotTitle <- "Mismanaged waste in ton, by country."
legendTitle <- "tons"
}
# Add legend and title
map <- map %>%
addLegend(
pal = colorNumeric("YlOrRd", domain = sub_map_data$value),
values = sub_map_data$value,
title = legendTitle,
position = "bottomright"
) %>%
addTitle(plotTitle, position = "topcenter")
return(map)
}
# Call the heatmap function with appropriate arguments
heatmap_result <- heatmap(waste_gdp_10, "Daily_Plastic_Waste", "Africa")
library(dplyr)
library(leaflet)
library(broom)
waste_vs_gdp <- readr::read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-05-21/per-capita-plastic-waste-vs-gdp-per-capita.csv")
waste_gdp_10 <- waste_vs_gdp %>%
filter(Year == 2010) %>% # Filter for observations in 2010
select(Entity,`Per capita plastic waste (kilograms per person per day)`) %>%
rename("Daily_Plastic_Waste" = `Per capita plastic waste (kilograms per person per day)`)
heatmap <- function(df, column_name, region) {
# Select only the data that the user has selected to view
plot_df <- df %>%
select(Entity, {{column_name}}) %>%
rename(value = {{column_name}}, region = Entity)
# Create a list of region-specific coordinates and boundaries
region_coords <- list(
Africa = list(xlim = c(-20, 60), ylim = c(-40, 40)),
North_America = list(xlim = c(-180, -50), ylim = c(0, 80)),
Europe = list(xlim = c(-27, 36), ylim = c(34, 67)),
Oceania = list(xlim = c(100, 180), ylim = c(-50, 0)),
Asia = list(xlim = c(20, 180), ylim = c(-10, 70)),
South_America = list(xlim = c(-90, -30), ylim = c(-60, 20))
)
# Get the region-specific coordinates and boundaries
region_info <- region_coords[[region]]
# Create a Leaflet map
map <- leaflet() %>%
setView(lng = mean(region_info$xlim), lat = mean(region_info$ylim), zoom = 3) %>%
addProviderTiles(providers$OpenStreetMap.BlackAndWhite)  # You can change the tile provider
# Load the world map data and plot polygons
world_map <- maps::map("world", plot = FALSE) %>%
maptools::pruneMap(xlim = region_info$xlim, ylim = region_info$ylim) %>%
tidy()
# Filter data for the selected region
sub_map_data <- left_join(world_map, plot_df, by = c("region" = "Entity"))
# Plot the polygons with color based on the values
map <- map %>%
addPolygons(
data = sub_map_data,
fillColor = ~colorNumeric("YlOrRd", domain = c(0, max(sub_map_data$value)))(value),
fillOpacity = 0.7,
weight = 1,
label = ~paste(region, "<br>", value, "tons"),
highlightOptions(
weight = 2,
color = "white",
fillOpacity = 0.7,
bringToFront = TRUE
),
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"
)
)
# Custom titles for data type
legendTitle <- ""
if (column_name == 'Daily_Plastic_Waste') {
plotTitle <- "Per capita plastic waste (kilograms per person per day)."
legendTitle <- "kgs"
} else if (column_name == 'Daily_Mismanaged_Waste') {
plotTitle <- "Per capita mismanaged plastic waste (kilograms per person per day)."
legendTitle <- "kgs"
} else if (column_name == 'Mismanaged_Waste') {
plotTitle <- "Mismanaged waste in ton, by country."
legendTitle <- "tons"
}
# Add legend and title
map <- map %>%
addLegend(
pal = colorNumeric("YlOrRd", domain = sub_map_data$value),
values = sub_map_data$value,
title = legendTitle,
position = "bottomright"
) %>%
addTitle(plotTitle, position = "topcenter")
return(map)
}
# Call the heatmap function with appropriate arguments
heatmap_result <- heatmap(waste_gdp_10, "Daily_Plastic_Waste", "Africa")
library(dplyr)
library(leaflet)
library(broom)
waste_vs_gdp <- readr::read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-05-21/per-capita-plastic-waste-vs-gdp-per-capita.csv")
waste_gdp_10 <- waste_vs_gdp %>%
filter(Year == 2010) %>% # Filter for observations in 2010
select(Entity,`Per capita plastic waste (kilograms per person per day)`) %>%
rename("Daily_Plastic_Waste" = `Per capita plastic waste (kilograms per person per day)`)
heatmap <- function(df, column_name, region) {
# Select only the data that the user has selected to view
plot_df <- df %>%
select(Entity, {{column_name}}) %>%
rename(value = {{column_name}}, region = Entity)
# Create a list of region-specific coordinates and boundaries
region_coords <- list(
Africa = list(xlim = c(-20, 60), ylim = c(-40, 40)),
North_America = list(xlim = c(-180, -50), ylim = c(0, 80)),
Europe = list(xlim = c(-27, 36), ylim = c(34, 67)),
Oceania = list(xlim = c(100, 180), ylim = c(-50, 0)),
Asia = list(xlim = c(20, 180), ylim = c(-10, 70)),
South_America = list(xlim = c(-90, -30), ylim = c(-60, 20))
)
# Get the region-specific coordinates and boundaries
region_info <- region_coords[[region]]
# Create a Leaflet map
map <- leaflet() %>%
setView(lng = mean(region_info$xlim), lat = mean(region_info$ylim), zoom = 3) %>%
addProviderTiles(providers$OpenStreetMap.BlackAndWhite)  # You can change the tile provider
# Load the world map data and plot polygons
world_map <- maps::map("world", plot = FALSE) %>%
maptools::pruneMap(xlim = region_info$xlim, ylim = region_info$ylim)
# Filter data for the selected region
sub_map_data <- left_join(world_map, plot_df, by = c("region" = "Entity"))
# Plot the polygons with color based on the values
map <- map %>%
addPolygons(
data = sub_map_data,
fillColor = ~colorNumeric("YlOrRd", domain = c(0, max(sub_map_data$value)))(value),
fillOpacity = 0.7,
weight = 1,
label = ~paste(region, "<br>", value, "tons"),
highlightOptions(
weight = 2,
color = "white",
fillOpacity = 0.7,
bringToFront = TRUE
),
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"
)
)
# Custom titles for data type
legendTitle <- ""
if (column_name == 'Daily_Plastic_Waste') {
plotTitle <- "Per capita plastic waste (kilograms per person per day)."
legendTitle <- "kgs"
} else if (column_name == 'Daily_Mismanaged_Waste') {
plotTitle <- "Per capita mismanaged plastic waste (kilograms per person per day)."
legendTitle <- "kgs"
} else if (column_name == 'Mismanaged_Waste') {
plotTitle <- "Mismanaged waste in ton, by country."
legendTitle <- "tons"
}
# Add legend and title
map <- map %>%
addLegend(
pal = colorNumeric("YlOrRd", domain = sub_map_data$value),
values = sub_map_data$value,
title = legendTitle,
position = "bottomright"
) %>%
addTitle(plotTitle, position = "topcenter")
return(map)
}
# Call the heatmap function with appropriate arguments
heatmap_result <- heatmap(waste_gdp_10, "Daily_Plastic_Waste", "Africa")
world_map <- maps::map("world", plot = FALSE) %>%
maptools::pruneMap(xlim = region_info$xlim, ylim = region_info$ylim)
world_map <- maps::map("world", plot = FALSE)
View(world_map)
world_map <- maps::map("world", plot = FALSE) %>%
maptools::pruneMap()
View(world_map)
library(dplyr)
library(leaflet)
library(broom)
waste_vs_gdp <- readr::read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-05-21/per-capita-plastic-waste-vs-gdp-per-capita.csv")
waste_gdp_10 <- waste_vs_gdp %>%
filter(Year == 2010) %>% # Filter for observations in 2010
select(Entity,`Per capita plastic waste (kilograms per person per day)`) %>%
rename("Daily_Plastic_Waste" = `Per capita plastic waste (kilograms per person per day)`)
heatmap <- function(df, column_name, region) {
# Select only the data that the user has selected to view
plot_df <- df %>%
select(Entity, {{column_name}}) %>%
rename(value = {{column_name}}, region = Entity)
# Create a list of region-specific coordinates and boundaries
region_coords <- list(
Africa = list(xlim = c(-20, 60), ylim = c(-40, 40)),
North_America = list(xlim = c(-180, -50), ylim = c(0, 80)),
Europe = list(xlim = c(-27, 36), ylim = c(34, 67)),
Oceania = list(xlim = c(100, 180), ylim = c(-50, 0)),
Asia = list(xlim = c(20, 180), ylim = c(-10, 70)),
South_America = list(xlim = c(-90, -30), ylim = c(-60, 20))
)
# Get the region-specific coordinates and boundaries
region_info <- region_coords[[region]]
# Create a Leaflet map
map <- leaflet() %>%
setView(lng = mean(region_info$xlim), lat = mean(region_info$ylim), zoom = 3) %>%
addProviderTiles(providers$OpenStreetMap.BlackAndWhite)  # You can change the tile provider
# Load the world map data and plot polygons
world_map <- maps::map("world", plot = FALSE) %>%
maptools::pruneMap(xlim = region_info$xlim, ylim = region_info$ylim)
# Filter data for the selected region
sub_map_data <- left_join(world_map, plot_df, by = c("name" = "Entity"))
# Plot the polygons with color based on the values
map <- map %>%
addPolygons(
data = sub_map_data,
fillColor = ~colorNumeric("YlOrRd", domain = c(0, max(sub_map_data$value)))(value),
fillOpacity = 0.7,
weight = 1,
label = ~paste(region, "<br>", value, "tons"),
highlightOptions(
weight = 2,
color = "white",
fillOpacity = 0.7,
bringToFront = TRUE
),
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"
)
)
# Custom titles for data type
legendTitle <- ""
if (column_name == 'Daily_Plastic_Waste') {
plotTitle <- "Per capita plastic waste (kilograms per person per day)."
legendTitle <- "kgs"
} else if (column_name == 'Daily_Mismanaged_Waste') {
plotTitle <- "Per capita mismanaged plastic waste (kilograms per person per day)."
legendTitle <- "kgs"
} else if (column_name == 'Mismanaged_Waste') {
plotTitle <- "Mismanaged waste in ton, by country."
legendTitle <- "tons"
}
# Add legend and title
map <- map %>%
addLegend(
pal = colorNumeric("YlOrRd", domain = sub_map_data$value),
values = sub_map_data$value,
title = legendTitle,
position = "bottomright"
) %>%
addTitle(plotTitle, position = "topcenter")
return(map)
}
# Call the heatmap function with appropriate arguments
heatmap_result <- heatmap(waste_gdp_10, "Daily_Plastic_Waste", "Africa")
shiny::runApp('Shiny_app')
runApp('Shiny_app')
runApp('app copy.R')
library(shiny); runApp('Shiny_app/app copy.R')
library(shiny); runApp('app copy.R')
library(leaflet)
library(tidyverse)
m <- leaflet() %>%
addTiles()  # Adds the default tile layer (OpenStreetMap)
m
m <- m %>%
setView(lng = -73.985, lat = 40.748, zoom = 12) %>%
addTiles() %>%
addMarkers(lng = -73.985, lat = 40.748) %>%
addScaleBar(position = "bottomright")  # Add a scale bar
m
m <- m %>%
setView(lng = -73.985, lat = 40.748, zoom = 12) %>%
addTiles() %>%
addMarkers(lng = -73.985, lat = 40.748) %>%
addScaleBar(position = "bottomright")  # Add a scale bar
m <- m %>%
setView(lng = -73.985, lat = 40.748, zoom = 12)
m
m <- m %>%
setView(lng = -73.985, lat = 40.748, zoom = 12)
m
m <- leaflet() %>%
addTiles()  # Adds the default tile layer (OpenStreetMap)
View(m)
library(ggplot2)
ggplot(mtcars, aes(x = mpg, y = cyl)) +
geom_point()
library(ggplot2)
ggplot(mtcars, aes(x = mpg, y = cyl))+
boxplot()
library(ggplot2)
ggplot(mtcars, aes(x = mpg, y = cyl))+
geom_point()
library(shiny); runApp('app copy.R')
library(shiny); runApp('app copy.R')
library(shiny); runApp('app copy.R')
library(shiny); runApp('app copy.R')
library(shiny); runApp('app copy.R')
library(shiny); runApp('app copy.R')
library(shiny); runApp('Shiny_App.R')
library(shiny); runApp('Shiny_App/Shiny_App.R')
